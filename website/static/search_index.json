[
  {
    "title": "Example: Slideshow",
    "content": "implements a keyboard-controlled image slideshow",
    "url": "https://github.com/zauberzeug/nicegui/tree/main/examples/slideshow/main.py"
  },
  {
    "title": "Example: Authentication",
    "content": "shows how to use sessions to build a login screen",
    "url": "https://github.com/zauberzeug/nicegui/tree/main/examples/authentication/main.py"
  },
  {
    "title": "Example: Modularization",
    "content": "provides an example of how to modularize your application into multiple files and reuse code",
    "url": "https://github.com/zauberzeug/nicegui/tree/main/examples/modularization/main.py"
  },
  {
    "title": "Example: FastAPI",
    "content": "illustrates the integration of NiceGUI with an existing FastAPI application",
    "url": "https://github.com/zauberzeug/nicegui/tree/main/examples/fastapi/main.py"
  },
  {
    "title": "Example: Map",
    "content": "demonstrates wrapping the JavaScript library [leaflet](https://leafletjs.com/) to display a map at specific locations",
    "url": "https://github.com/zauberzeug/nicegui/tree/main/examples/map/main.py"
  },
  {
    "title": "Example: AI Interface",
    "content": "utilizes the [replicate](https://replicate.com) library to perform voice-to-text transcription and generate images from prompts with Stable Diffusion",
    "url": "https://github.com/zauberzeug/nicegui/tree/main/examples/ai_interface/main.py"
  },
  {
    "title": "Example: 3D Scene",
    "content": "creates a webGL view and loads an STL mesh illuminated with a spotlight",
    "url": "https://github.com/zauberzeug/nicegui/tree/main/examples/3d_scene/main.py"
  },
  {
    "title": "Example: Custom Vue Component",
    "content": "shows how to write and integrate a custom Vue component",
    "url": "https://github.com/zauberzeug/nicegui/tree/main/examples/custom_vue_component/main.py"
  },
  {
    "title": "Example: Image Mask Overlay",
    "content": "shows how to overlay an image with a mask",
    "url": "https://github.com/zauberzeug/nicegui/tree/main/examples/image_mask_overlay/main.py"
  },
  {
    "title": "Example: Infinite Scroll",
    "content": "presents an infinitely scrolling image gallery",
    "url": "https://github.com/zauberzeug/nicegui/tree/main/examples/infinite_scroll/main.py"
  },
  {
    "title": "Example: OpenCV Webcam",
    "content": "uses OpenCV to capture images from a webcam",
    "url": "https://github.com/zauberzeug/nicegui/tree/main/examples/opencv_webcam/main.py"
  },
  {
    "title": "Example: SVG Clock",
    "content": "displays an analog clock by updating an SVG with `ui.timer`",
    "url": "https://github.com/zauberzeug/nicegui/tree/main/examples/svg_clock/main.py"
  },
  {
    "title": "Example: Progress",
    "content": "demonstrates a progress bar for heavy computations",
    "url": "https://github.com/zauberzeug/nicegui/tree/main/examples/progress/main.py"
  },
  {
    "title": "Example: NGINX Subpath",
    "content": "shows the setup to serve an app behind a reverse proxy subpath",
    "url": "https://github.com/zauberzeug/nicegui/tree/main/examples/nginx_subpath/main.py"
  },
  {
    "title": "Example: Script Executor",
    "content": "executes scripts on selection and displays the output",
    "url": "https://github.com/zauberzeug/nicegui/tree/main/examples/script_executor/main.py"
  },
  {
    "title": "Example: Local File Picker",
    "content": "demonstrates a dialog for selecting files locally on the server",
    "url": "https://github.com/zauberzeug/nicegui/tree/main/examples/local_file_picker/main.py"
  },
  {
    "title": "Example: Search as you type",
    "content": "using public API of thecocktaildb.com to search for cocktails",
    "url": "https://github.com/zauberzeug/nicegui/tree/main/examples/search_as_you_type/main.py"
  },
  {
    "title": "Example: Menu and Tabs",
    "content": "uses Quasar to create foldable menu and tabs inside a header bar",
    "url": "https://github.com/zauberzeug/nicegui/tree/main/examples/menu_and_tabs/main.py"
  },
  {
    "title": "Example: Todo list",
    "content": "shows a simple todo list with checkboxes and text input",
    "url": "https://github.com/zauberzeug/nicegui/tree/main/examples/todo_list/main.py"
  },
  {
    "title": "Example: Trello Cards",
    "content": "shows Trello-like cards that can be dragged and dropped into columns",
    "url": "https://github.com/zauberzeug/nicegui/tree/main/examples/trello_cards/main.py"
  },
  {
    "title": "Example: Slots",
    "content": "shows how to use scoped slots to customize Quasar elements",
    "url": "https://github.com/zauberzeug/nicegui/tree/main/examples/slots/main.py"
  },
  {
    "title": "Example: Table and slots",
    "content": "shows how to use component slots in a table",
    "url": "https://github.com/zauberzeug/nicegui/tree/main/examples/table_and_slots/main.py"
  },
  {
    "title": "Example: Single Page App",
    "content": "navigate without reloading the page",
    "url": "https://github.com/zauberzeug/nicegui/tree/main/examples/single_page_app/main.py"
  },
  {
    "title": "Example: Chat App",
    "content": "a simple chat app",
    "url": "https://github.com/zauberzeug/nicegui/tree/main/examples/chat_app/main.py"
  },
  {
    "title": "Example: Chat with AI",
    "content": "a simple chat app with AI",
    "url": "https://github.com/zauberzeug/nicegui/tree/main/examples/chat_with_ai/main.py"
  },
  {
    "title": "Example: SQLite Database",
    "content": "CRUD operations on a SQLite database with async-support through Tortoise ORM",
    "url": "https://github.com/zauberzeug/nicegui/tree/main/examples/sqlite_database/main.py"
  },
  {
    "title": "Example: Pandas DataFrame",
    "content": "displays an editable [pandas](https://pandas.pydata.org) DataFrame",
    "url": "https://github.com/zauberzeug/nicegui/tree/main/examples/pandas_dataframe/main.py"
  },
  {
    "title": "Example: Lightbox",
    "content": "A thumbnail gallery where each image can be clicked to enlarge",
    "url": "https://github.com/zauberzeug/nicegui/tree/main/examples/lightbox/main.py"
  },
  {
    "title": "Example: ROS2",
    "content": "Using NiceGUI as web interface for a ROS2 robot",
    "url": "https://github.com/zauberzeug/nicegui/tree/main/examples/ros2/"
  },
  {
    "title": "Example: Docker Image",
    "content": "Demonstrate using the official [zauberzeug/nicegui](https://hub.docker.com/r/zauberzeug/nicegui) docker image",
    "url": "https://github.com/zauberzeug/nicegui/tree/main/examples/docker_image/"
  },
  {
    "title": "Example: Download Text as File",
    "content": "providing in-memory data like strings as file download",
    "url": "https://github.com/zauberzeug/nicegui/tree/main/examples/download_text_as_file/main.py"
  },
  {
    "title": "Example: Generate PDF",
    "content": "create SVG preview and PDF download from input form elements",
    "url": "https://github.com/zauberzeug/nicegui/tree/main/examples/generate_pdf/main.py"
  },
  {
    "title": "Example: Custom Binding",
    "content": "create a custom binding for a label with a bindable background color",
    "url": "https://github.com/zauberzeug/nicegui/tree/main/examples/custom_binding/main.py"
  },
  {
    "title": "Example: Descope Auth",
    "content": "login form and user profile using [Descope](https://descope.com)",
    "url": "https://github.com/zauberzeug/nicegui/tree/main/examples/descope_auth/main.py"
  },
  {
    "title": "Example: Editable table",
    "content": "editable table allowing to add, edit, delete rows",
    "url": "https://github.com/zauberzeug/nicegui/tree/main/examples/editable_table/main.py"
  },
  {
    "title": "Basic Elements",
    "content": "This is **Markdown**.",
    "url": "/documentation/#basic_elements"
  },
  {
    "title": "SVG",
    "content": "You can add Scalable Vector Graphics using the ui.html element.",
    "url": "/documentation/#svg"
  },
  {
    "title": "Markdown and HTML",
    "content": "Overview",
    "url": "/documentation/#markdown_and_html"
  },
  {
    "title": "Captions and Overlays",
    "content": "By nesting elements inside a ui.image you can create augmentations.  Use Quasar classes for positioning and styling captions. To overlay an SVG, make the viewBox exactly the size of the image and provide 100% width/height to match the actual rendered size.",
    "url": "/documentation/#captions_and_overlays"
  },
  {
    "title": "Images, Audio and Video",
    "content": "Overview",
    "url": "/documentation/#images,_audio_and_video"
  },
  {
    "title": "Data Elements",
    "content": "Overview",
    "url": "/documentation/#data_elements"
  },
  {
    "title": "Clear Containers",
    "content": "To remove all elements from a row, column or card container, use can call ``py container.clear() `  Alternatively, you can remove individual elements by calling  - container.remove(element: Element), - container.remove(index: int), or - element.delete()`.",
    "url": "/documentation/#clear_containers"
  },
  {
    "title": "Tooltips",
    "content": "Simply call the tooltip(text:str) method on UI elements to provide a tooltip.  For more artistic control you can nest tooltip elements and apply props, classes and styles.",
    "url": "/documentation/#tooltips"
  },
  {
    "title": "Layout",
    "content": "Overview",
    "url": "/documentation/#layout"
  },
  {
    "title": "Styling",
    "content": "NiceGUI uses the Quasar Framework version 1.0 and hence has its full design power. Each NiceGUI element provides a props method whose content is passed to the Quasar component: Have a look at the Quasar documentation for all styling props. Props with a leading : can contain JavaScript expressions that are evaluated on the client. You can also apply Tailwind CSS utility classes with the classes method.  If you really need to apply CSS, you can use the style method. Here the delimiter is ; instead of a blank space.  All three functions also provide remove and replace parameters in case the predefined look is not wanted in a particular styling.",
    "url": "/documentation/#styling"
  },
  {
    "title": "Appearance",
    "content": "Overview",
    "url": "/documentation/#appearance"
  },
  {
    "title": "Tailwind CSS",
    "content": "Tailwind CSS is a CSS framework for rapidly building custom user interfaces. NiceGUI provides a fluent, auto-complete friendly interface for adding Tailwind classes to UI elements.  You can discover available classes by navigating the methods of the tailwind property. The builder pattern allows you to chain multiple classes together (as shown with \"Label A\"). You can also call the tailwind property with a list of classes (as shown with \"Label B\").  Although this is very similar to using the classes method, it is more convenient for Tailwind classes due to auto-completion.  Last but not least, you can also predefine a style and apply it to multiple elements (labels C and D).  Note that sometimes Tailwind is overruled by Quasar styles, e.g. when using ui.button('Button').tailwind('bg-red-500'). This is a known limitation and not fully in our control. But we try to provide solutions like the color parameter: ui.button('Button', color='red-500').",
    "url": "/documentation/#tailwind_css"
  },
  {
    "title": "Try styling NiceGUI elements!",
    "content": "Try out how Tailwind CSS classes, Quasar props, and CSS styles affect NiceGUI elements. py from nicegui import ui  element = select_element.options[select_element.value]('element') element.classes(' ') element.props(' ') element.style(' ') py ui.run()",
    "url": "/documentation/#try_styling_nicegui_elements!"
  },
  {
    "title": "UI Updates",
    "content": "NiceGUI tries to automatically synchronize the state of UI elements with the client, e.g. when a label text, an input value or style/classes/props of an element have changed. In other cases, you can explicitly call element.update() or ui.update(*elements) to update. The demo code shows both methods for a ui.echart, where it is difficult to automatically detect changes in the options dictionary.",
    "url": "/documentation/#ui_updates"
  },
  {
    "title": "Async event handlers",
    "content": "Most elements also support asynchronous event handlers.  Note: You can also pass a functools.partial into the on_click property to wrap async functions with parameters.",
    "url": "/documentation/#async_event_handlers"
  },
  {
    "title": "Running CPU-bound tasks",
    "content": "NiceGUI provides a cpu_bound function for running CPU-bound tasks in a separate process. This is useful for long-running computations that would otherwise block the event loop and make the UI unresponsive. The function returns a future that can be awaited.",
    "url": "/documentation/#running_cpu-bound_tasks"
  },
  {
    "title": "Running I/O-bound tasks",
    "content": "NiceGUI provides an io_bound function for running I/O-bound tasks in a separate thread. This is useful for long-running I/O operations that would otherwise block the event loop and make the UI unresponsive. The function returns a future that can be awaited.",
    "url": "/documentation/#running_i/o-bound_tasks"
  },
  {
    "title": "Action",
    "content": "Overview",
    "url": "/documentation/#action"
  },
  {
    "title": "Auto-index page",
    "content": "Pages created with the @ui.page decorator are \"private\". Their content is re-created for each client. Thus, in the demo to the right, the displayed ID on the private page changes when the browser reloads the page.  UI elements that are not wrapped in a decorated page function are placed on an automatically generated index page at route \"/\". This auto-index page is created once on startup and *shared* across all clients that might connect. Thus, each connected client will see the *same* elements. In the demo to the right, the displayed ID on the auto-index page remains constant when the browser reloads the page.",
    "url": "/documentation/#auto-index_page"
  },
  {
    "title": "Page Layout",
    "content": "With ui.header, ui.footer, ui.left_drawer and ui.right_drawer you can add additional layout elements to a page. The fixed argument controls whether the element should scroll or stay fixed on the screen. The top_corner and bottom_corner arguments indicate whether a drawer should expand to the top or bottom of the page. See <https://quasar.dev/layout/header-and-footer> and <https://quasar.dev/layout/drawer> for more information about possible props. With ui.page_sticky you can place an element \"sticky\" on the screen. See <https://quasar.dev/layout/page-sticky> for more information.",
    "url": "/documentation/#page_layout"
  },
  {
    "title": "Parameter injection",
    "content": "Thanks to FastAPI, a page function accepts optional parameters to provide path parameters, query parameters or the whole incoming request for accessing the body payload, headers, cookies and more.",
    "url": "/documentation/#parameter_injection"
  },
  {
    "title": "Pages",
    "content": "Overview",
    "url": "/documentation/#pages"
  },
  {
    "title": "Routes",
    "content": "Overview",
    "url": "/documentation/#routes"
  },
  {
    "title": "Static files",
    "content": "Add a directory of static files.  add_static_files() makes a local directory available at the specified endpoint, e.g. '/static'. This is useful for providing local data like images to the frontend. Otherwise the browser would not be able to access the files. Do only put non-security-critical files in there, as they are accessible to everyone.  To make a single file accessible, you can use add_static_file(). For media files which should be streamed, you can use add_media_files() or add_media_file() instead.  :param url_path: string that starts with a slash \"/\" and identifies the path at which the files should be served :param local_directory: local folder with files to serve as static content",
    "url": "/documentation/#static_files"
  },
  {
    "title": "API Responses",
    "content": "NiceGUI is based on FastAPI. This means you can use all of FastAPI's features. For example, you can implement a RESTful API in addition to your graphical user interface. You simply import the app object from nicegui. Or you can run NiceGUI on top of your own FastAPI app by using ui.run_with(app) instead of starting a server automatically with ui.run().  You can also return any other FastAPI response object inside a page function. For example, you can return a RedirectResponse to redirect the user to another page if certain conditions are met. This is used in our authentication demo.",
    "url": "/documentation/#api_responses"
  },
  {
    "title": "Media files",
    "content": "Add directory of media files.  add_media_files() allows a local files to be streamed from a specified endpoint, e.g. '/media'. This should be used for media files to support proper streaming. Otherwise the browser would not be able to access and load the the files incrementally or jump to different positions in the stream. Do only put non-security-critical files in there, as they are accessible to everyone.  To make a single file accessible via streaming, you can use add_media_file(). For small static files, you can use add_static_files() or add_static_file() instead.  :param url_path: string that starts with a slash \"/\" and identifies the path at which the files should be served :param local_directory: local folder with files to serve as media content",
    "url": "/documentation/#media_files"
  },
  {
    "title": "Events",
    "content": "You can register coroutines or functions to be called for the following events:  - app.on_startup: called when NiceGUI is started or restarted - app.on_shutdown: called when NiceGUI is shut down or restarted - app.on_connect: called for each client which connects (optional argument: nicegui.Client) - app.on_disconnect: called for each client which disconnects (optional argument: nicegui.Client) - app.on_exception: called when an exception occurs (optional argument: exception)  When NiceGUI is shut down or restarted, all tasks still in execution will be automatically canceled.",
    "url": "/documentation/#events"
  },
  {
    "title": "Lifecycle",
    "content": "Overview",
    "url": "/documentation/#lifecycle"
  },
  {
    "title": "URLs",
    "content": "You can access the list of all URLs on which the NiceGUI app is available via app.urls. The URLs are not available in app.on_startup because the server is not yet running. Instead, you can access them in a page function or register a callback with app.urls.on_change.",
    "url": "/documentation/#urls"
  },
  {
    "title": "Shutdown",
    "content": "Shut down NiceGUI.  This will programmatically stop the server. Only possible when auto-reload is disabled.",
    "url": "/documentation/#shutdown"
  },
  {
    "title": "Auto-context",
    "content": "In order to allow writing intuitive UI descriptions, NiceGUI automatically tracks the context in which elements are created. This means that there is no explicit parent parameter. Instead the parent context is defined using a with statement. It is also passed to event handlers and timers.  In the demo, the label \"Card content\" is added to the card. And because the ui.button is also added to the card, the label \"Click!\" will also be created in this context. The label \"Tick!\", which is added once after one second, is also added to the card.  This design decision allows for easily creating modular components that keep working after moving them around in the UI. For example, you can move label and button somewhere else, maybe wrap them in another container, and the code will still work.",
    "url": "/documentation/#auto-context"
  },
  {
    "title": "NiceGUI Fundamentals",
    "content": "Overview",
    "url": "/documentation/#nicegui_fundamentals"
  },
  {
    "title": "Native Mode",
    "content": "You can enable native mode for NiceGUI by specifying native=True in the ui.run function. To customize the initial window size and display mode, use the window_size and fullscreen parameters respectively. Additionally, you can provide extra keyword arguments via app.native.window_args and app.native.start_args. Pick any parameter as it is defined by the internally used pywebview module for the webview.create_window and webview.start functions. Note that these keyword arguments will take precedence over the parameters defined in ui.run.  In native mode the app.native.main_window object allows you to access the underlying window. It is an async version of Window from pywebview.",
    "url": "/documentation/#native_mode"
  },
  {
    "title": "Environment Variables",
    "content": "You can set the following environment variables to configure NiceGUI:  - MATPLOTLIB (default: true) can be set to false to avoid the potentially costly import of Matplotlib. This will make ui.pyplot and ui.line_plot unavailable. - NICEGUI_STORAGE_PATH (default: local \".nicegui\") can be set to change the location of the storage files. - MARKDOWN_CONTENT_CACHE_SIZE (default: 1000): The maximum number of Markdown content snippets that are cached in memory.",
    "url": "/documentation/#environment_variables"
  },
  {
    "title": "Configuration",
    "content": "If webview has trouble finding required libraries, you may get an error relating to \"WebView2Loader.dll\". To work around this issue, try moving the DLL file up a directory, e.g.:  * from .venv/Lib/site-packages/webview/lib/x64/WebView2Loader.dll * to .venv/Lib/site-packages/webview/lib/WebView2Loader.dll",
    "url": "/documentation/#configuration"
  },
  {
    "title": "Deployment",
    "content": "Overview",
    "url": "/documentation/#deployment"
  },
  {
    "title": "Server Hosting",
    "content": "To deploy your NiceGUI app on a server, you will need to execute your main.py (or whichever file contains your ui.run(...)) on your cloud infrastructure. You can, for example, just install the NiceGUI python package via pip and use systemd or similar service to start the main script. In most cases, you will set the port to 80 (or 443 if you want to use HTTPS) with the ui.run command to make it easily accessible from the outside.  A convenient alternative is the use of our pre-built multi-arch Docker image which contains all necessary dependencies. With this command you can launch the script main.py in the current directory on the public port 80: bash docker run -it --restart always \\ -p 80:8080 \\ -e PUID=$(id -u) \\ -e PGID=$(id -g) \\ -v $(pwd)/:/app/ \\ zauberzeug/nicegui:latest The demo assumes main.py uses the port 8080 in the ui.run command (which is the default). The -d tells docker to run in background and --restart always makes sure the container is restarted if the app crashes or the server reboots. Of course this can also be written in a Docker compose file: yaml app: image: zauberzeug/nicegui:latest restart: always ports: - 80:8080 environment: - PUID=1000 # change this to your user id - PGID=1000 # change this to your group id volumes: - ./:/app/ There are other handy features in the Docker image like non-root user execution and signal pass-through. For more details we recommend to have a look at our Docker example. You can provide SSL certificates directly using FastAPI. In production we also like using reverse proxies like Traefik or NGINX to handle these details for us. See our development docker-compose.yml as an example.  You may also have a look at our demo for using a custom FastAPI app. This will allow you to do very flexible deployments as described in the FastAPI documentation. Note that there are additional steps required to allow multiple workers.",
    "url": "/documentation/#server_hosting"
  },
  {
    "title": "Package for Installation",
    "content": "NiceGUI apps can also be bundled into an executable with PyInstaller. This allows you to distribute your app as a single file that can be executed on any computer.  Just take care your ui.run command does not use the reload argument. Running the build.py below will create an executable myapp in the dist folder: python from nicegui import native_mode, ui  ui.label('Hello from PyInstaller')  ui.run(reload=False, port=native_mode.find_open_port()) python import os import subprocess from pathlib import Path import nicegui  cmd = [ 'python', '-m', 'PyInstaller', 'main.py', # your main file with ui.run() '--name', 'myapp', # name of your app '--onefile', #'--windowed', # prevent console appearing, only use with ui.run(native=True, ...) '--add-data', f'Path(nicegui.__file__).parentos.pathsepnicegui' ] subprocess.call(cmd) **Packaging Tips**  - When building a PyInstaller app, your main script can use a native window (rather than a browser window) by using ui.run(reload=False, native=True). The native parameter can be True or False depending on whether you want a native window or to launch a page in the user's browser - either will work in the PyInstaller generated app.  - Specifying --windowed to PyInstaller will prevent a terminal console from appearing. However you should only use this option if you have also specified native=True in your ui.run command. Without a terminal console the user won't be able to exit the app by pressing Ctrl-C. With the native=True option, the app will automatically close when the window is closed, as expected.  - Specifying --windowed to PyInstaller will create an .app file on Mac which may be more convenient to distribute. When you double-click the app to run it, it will not show any console output. You can also run the app from the command line with ./myapp.app/Contents/MacOS/myapp to see the console output.  - Specifying --onefile to PyInstaller will create a single executable file. Whilst convenient for distribution, it will be slower to start up. This is not NiceGUI's fault but just the way Pyinstaller zips things into a single file, then unzips everything into a temporary directory before running. You can mitigate this by removing --onefile from the PyInstaller command, and zip up the generated dist directory yourself, distribute it, and your end users can unzip once and be good to go, without the constant expansion of files due to the --onefile flag.  - Summary of user experience for different options:  | PyInstaller              | ui.run(...)  | Explanation | | :---                     | :---           | :---        | | onefile                | native=False | Single executable generated in dist/, runs in browser | | onefile                | native=True  | Single executable generated in dist/, runs in popup window | | onefile and windowed | native=True  | Single executable generated in dist/ (on Mac a proper dist/myapp.app generated incl. icon), runs in popup window, no console appears | | onefile and windowed | native=False | Avoid (no way to exit the app) | | Specify neither          |                | A dist/myapp directory created which can be zipped manually and distributed; run with dist/myapp/myapp |  - If you are using a Python virtual environment, ensure you pip install pyinstaller within your virtual environment so that the correct PyInstaller is used, or you may get broken apps due to the wrong version of PyInstaller being picked up. That is why the build script invokes PyInstaller using python -m PyInstaller rather than just pyinstaller. bash python -m venv venv source venv/bin/activate pip install nicegui pip install pyinstaller **Note:** If you're getting an error \"TypeError: a bytes-like object is required, not 'str'\", try adding the following lines to the top of your main.py file: py import sys sys.stdout = open('logs.txt', 'w')  See <https://github.com/zauberzeug/nicegui/issues/681> for more information.",
    "url": "/documentation/#package_for_installation"
  },
  {
    "title": "NiceGUI On Air",
    "content": "By using ui.run(on_air=True) you can share your local app with others over the internet \ud83e\uddde.  When accessing the on-air URL, all libraries (like Vue, Quasar, ...) are loaded from our CDN. Thereby only the raw content and events need to be transmitted by your local app. This makes it blazing fast even if your app only has a poor internet connection (e.g. a mobile robot in the field).  By setting on_air=True you will get a random URL which is valid for 1 hour. If you sign-up at <https://on-air.nicegui.io> you get a token which could be used to identify your device: ui.run(on_air='<your token>'). This will give you a fixed URL and the possibility to protect remote access with a passphrase.  Currently On Air is available as a tech preview and can be used free of charge (for now). We will gradually improve stability, introduce payment options and extend the service with multi-device management, remote terminal access and more. Please let us know your feedback on GitHub, Reddit, or Discord.  **Data Privacy:** We take your privacy very serious. NiceGUI On Air does not log or store any content of the relayed data.",
    "url": "/documentation/#nicegui_on_air"
  },
  {
    "title": "Icon",
    "content": "This element is based on Quasar's QIcon <https://quasar.dev/vue-components/icon>_ component.  Here <https://fonts.google.com/icons?icon.set=Material+Icons>_ is a reference of possible names.  :param name: name of the icon (snake case, e.g. add_circle) :param size: size in CSS units, including unit name or standard size name (xs|sm|md|lg|xl), examples: 16px, 2rem :param color: icon color (either a Quasar, Tailwind, or CSS color or None, default: None)",
    "url": "/documentation/icon"
  },
  {
    "title": "Icon: Eva icons",
    "content": "You can use Eva icons in your app.",
    "url": "/documentation/icon#eva_icons"
  },
  {
    "title": "Icon: Lottie files",
    "content": "You can also use Lottie files with animations.",
    "url": "/documentation/icon#lottie_files"
  },
  {
    "title": "Code",
    "content": "This element displays a code block with syntax highlighting.  :param content: code to display :param language: language of the code (default: \"python\") copy_to_clipboard Copy the code to the clipboard.",
    "url": "/documentation/code"
  },
  {
    "title": "Download",
    "content": "Function to trigger the download of a file.  :param src: target URL or local path of the file which should be downloaded :param filename: name of the file to download (default: name of the file on the server)",
    "url": "/documentation/download"
  },
  {
    "title": "Open",
    "content": "Can be used to programmatically trigger redirects for a specific client.  When using the new_tab parameter, the browser might block the new tab. This is a browser setting and cannot be changed by the application. You might want to use ui.link and its new_tab parameter instead.  Note: When using an auto-index page </documentation#auto-index_page>_ (e.g. no @page decorator), all clients (i.e. browsers) connected to the page will open the target URL unless a socket is specified. User events like button clicks provide such a socket.  :param target: page function or string that is a an absolute URL or relative path from base URL :param new_tab: whether to open the target in a new tab (might be blocked by the browser)",
    "url": "/documentation/open"
  },
  {
    "title": "Checkbox",
    "content": "This element is based on Quasar's QCheckbox <https://quasar.dev/vue-components/checkbox>_ component.  :param text: the label to display next to the checkbox :param value: whether it should be checked initially (default: False) :param on_change: callback to execute when value changes",
    "url": "/documentation/checkbox"
  },
  {
    "title": "Column Element",
    "content": "Provides a container which arranges its child in a column.  :param wrap: whether to wrap the content (default: False)",
    "url": "/documentation/column"
  },
  {
    "title": "Column: Masonry or Pinterest-Style Layout",
    "content": "To create a masonry/Pinterest layout, the normal ui.column can not be used. But it can be achieved with a few TailwindCSS classes.",
    "url": "/documentation/column#masonry_or_pinterest-style_layout"
  },
  {
    "title": "Avatar",
    "content": "A avatar element wrapping Quasar's QAvatar <https://quasar.dev/vue-components/avatar>_ component.  :param icon: name of the icon or image path with \"img:\" prefix (e.g. \"map\", \"img:path/to/image.png\") :param color: background color (either a Quasar, Tailwind, or CSS color or None, default: \"primary\") :param text_color: color name from the Quasar Color Palette (e.g. \"primary\", \"teal-10\") :param size: size in CSS units, including unit name or standard size name (xs|sm|md|lg|xl) (e.g. \"16px\", \"2rem\") :param font_size: size in CSS units, including unit name, of the content (icon, text) (e.g. \"18px\", \"2rem\") :param square: removes border-radius so borders are squared (default: False) :param rounded: applies a small standard border-radius for a squared shape of the component (default: False)",
    "url": "/documentation/avatar"
  },
  {
    "title": "Avatar: Photos",
    "content": "To use a photo as an avatar, you can use ui.image within ui.avatar.",
    "url": "/documentation/avatar#photos"
  },
  {
    "title": "Button",
    "content": "This element is based on Quasar's QBtn <https://quasar.dev/vue-components/button>_ component.  The `color parameter accepts a Quasar color, a Tailwind color, or a CSS color. If a Quasar color is used, the button will be styled according to the Quasar theme including the color of the text. Note that there are colors like \"red\" being both a Quasar color and a CSS color. In such cases the Quasar color will be used.  :param text: the label of the button :param on_click: callback which is invoked when button is pressed :param color: the color of the button (either a Quasar, Tailwind, or CSS color or None, default: 'primary') :param icon: the name of an icon to be displayed on the button (default: None`) clicked Wait until the button is clicked.",
    "url": "/documentation/button"
  },
  {
    "title": "Button: Icons",
    "content": "You can also add an icon to a button.",
    "url": "/documentation/button#icons"
  },
  {
    "title": "Button: Await button click",
    "content": "Sometimes it is convenient to wait for a button click before continuing the execution.",
    "url": "/documentation/button#await_button_click"
  },
  {
    "title": "Button: Disable button with a context manager",
    "content": "This showcases a context manager that can be used to disable a button for the duration of an async process.",
    "url": "/documentation/button#disable_button_with_a_context_manager"
  },
  {
    "title": "Spinner",
    "content": "This element is based on Quasar's QSpinner <https://quasar.dev/vue-components/spinners>_ component.  :param type: type of spinner (e.g. \"audio\", \"ball\", \"bars\", ..., default: \"default\") :param size: size of the spinner (e.g. \"3em\", \"10px\", \"xl\", ..., default: \"1em\") :param color: color of the spinner (either a Quasar, Tailwind, or CSS color or None, default: \"primary\") :param thickness: thickness of the spinner (applies to the \"default\" spinner only, default: 5.0)",
    "url": "/documentation/spinner"
  },
  {
    "title": "File Upload",
    "content": "Based on Quasar's QUploader <https://quasar.dev/vue-components/uploader>_ component.  :param multiple: allow uploading multiple files at once (default: False) :param max_file_size: maximum file size in bytes (default: 0) :param max_total_size: maximum total size of all files in bytes (default: 0) :param max_files: maximum number of files (default: 0) :param on_upload: callback to execute for each uploaded file (type: nicegui.events.UploadEventArguments) :param on_rejected: callback to execute for each rejected file :param label: label for the uploader (default: '') :param auto_upload: automatically upload files when they are selected (default: False) reset Clear the upload queue.",
    "url": "/documentation/upload"
  },
  {
    "title": "Upload: Upload restrictions",
    "content": "In this demo, the upload is restricted to a maximum file size of 1 MB. When a file is rejected, a notification is shown.",
    "url": "/documentation/upload#upload_restrictions"
  },
  {
    "title": "Upload: Show file content",
    "content": "In this demo, the uploaded markdown file is shown in a dialog.",
    "url": "/documentation/upload#show_file_content"
  },
  {
    "title": "Timer",
    "content": "One major drive behind the creation of NiceGUI was the necessity to have a simple approach to update the interface in regular intervals, for example to show a graph with incoming measurements. A timer will execute a callback repeatedly with a given interval.  :param interval: the interval in which the timer is called (can be changed during runtime) :param callback: function or coroutine to execute when interval elapses :param active: whether the callback should be executed or not (can be changed during runtime) :param once: whether the callback is only executed once after a delay specified by interval (default: False) activate Activate the timer.deactivate Deactivate the timer.cancel Cancel the timer.",
    "url": "/documentation/timer"
  },
  {
    "title": "Timer: Activate, deactivate and cancel a timer",
    "content": "You can activate and deactivate a timer using the active property. You can cancel a timer using the cancel method. After canceling a timer, it cannot be activated anymore.",
    "url": "/documentation/timer#activate,_deactivate_and_cancel_a_timer"
  },
  {
    "title": "Timer: Call a function after a delay",
    "content": "You can call a function after a delay using a timer with the once parameter.",
    "url": "/documentation/timer#call_a_function_after_a_delay"
  },
  {
    "title": "Linear Progress",
    "content": "A linear progress bar wrapping Quasar's QLinearProgress <https://quasar.dev/vue-components/linear-progress>_ component.  :param value: the initial value of the field (from 0.0 to 1.0) :param size: the height of the progress bar (default: \"20px\" with value label and \"4px\" without) :param show_value: whether to show a value label in the center (default: True) :param color: color (either a Quasar, Tailwind, or CSS color or None, default: \"primary\")",
    "url": "/documentation/linear_progress"
  },
  {
    "title": "Run JavaScript",
    "content": "This function runs arbitrary JavaScript code on a page that is executed in the browser. The client must be connected before this function is called. To access a client-side object by ID, use the JavaScript function getElement().  If the function is awaited, the result of the JavaScript code is returned. Otherwise, the JavaScript code is executed without waiting for a response.  :param code: JavaScript code to run :param timeout: timeout in seconds (default: 1.0) :param check_interval: interval in seconds to check for a response (default: 0.01)  :return: AwaitableResponse that can be awaited to get the result of the JavaScript code",
    "url": "/documentation/run_javascript"
  },
  {
    "title": "Run Javascript: Run async JavaScript",
    "content": "Using run_javascript you can also run asynchronous code in the browser. The following demo shows how to get the current location of the user.",
    "url": "/documentation/run_javascript#run_async_javascript"
  },
  {
    "title": "AG Grid",
    "content": "An element to create a grid using AG Grid <https://www.ag-grid.com/>_.  The methods call_api_method and call_column_api_method can be used to interact with the AG Grid instance on the client.  :param options: dictionary of AG Grid options :param html_columns: list of columns that should be rendered as HTML (default: []) :param theme: AG Grid theme (default: 'balham') :param auto_size_columns: whether to automatically resize columns to fit the grid width (default: True) update call_api_method Call an AG Grid API method.  See AG Grid API <https://www.ag-grid.com/javascript-data-grid/grid-api/>_ for a list of methods.  If the function is awaited, the result of the method call is returned. Otherwise, the method is executed without waiting for a response.  :param name: name of the method :param args: arguments to pass to the method  :return: AwaitableResponse that can be awaited to get the result of the method call call_column_api_method Call an AG Grid Column API method.  See AG Grid Column API <https://www.ag-grid.com/javascript-data-grid/column-api/>_ for a list of methods.  If the function is awaited, the result of the method call is returned. Otherwise, the method is executed without waiting for a response.  :param name: name of the method :param args: arguments to pass to the method  :return: AwaitableResponse that can be awaited to get the result of the method call get_selected_rows Get the currently selected rows.  This method is especially useful when the grid is configured with `rowSelection: 'multiple'.  See AG Grid API <https://www.ag-grid.com/javascript-data-grid/row-selection/#reference-selection-getSelectedRows>_ for more information.  :return: list of selected row data get_selected_row Get the single currently selected row.  This method is especially useful when the grid is configured with rowSelection: 'single'.  :return: row data of the first selection if any row is selected, otherwise None get_client_data Get the data from the client including any edits made by the client.  This method is especially useful when the grid is configured with 'editable': True.  See AG Grid API <https://www.ag-grid.com/javascript-data-grid/accessing-data/>_ for more information.  Note that when editing a cell, the row data is not updated until the cell exits the edit mode. This does not happen when the cell loses focus, unless stopEditingWhenCellsLoseFocus: True is set.  :return: list of row data load_client_data Obtain client data and update the element's row data with it.  This syncs edits made by the client in editable cells to the server.  Note that when editing a cell, the row data is not updated until the cell exits the edit mode. This does not happen when the cell loses focus, unless stopEditingWhenCellsLoseFocus: True` is set.",
    "url": "/documentation/aggrid"
  },
  {
    "title": "Aggrid: Select AG Grid Rows",
    "content": "You can add checkboxes to grid cells to allow the user to select single or multiple rows.  To retrieve the currently selected rows, use the get_selected_rows method. This method returns a list of rows as dictionaries.  If rowSelection is set to 'single' or to get the first selected row, you can also use the get_selected_row method. This method returns a single row as a dictionary or None if no row is selected.  See the AG Grid documentation for more information.",
    "url": "/documentation/aggrid#select_ag_grid_rows"
  },
  {
    "title": "Aggrid: Filter Rows using Mini Filters",
    "content": "You can add mini filters to the header of each column to filter the rows.  Note how the \"agTextColumnFilter\" matches individual characters, like \"a\" in \"Alice\" and \"Carol\", while the \"agNumberColumnFilter\" matches the entire number, like \"18\" and \"21\", but not \"1\".",
    "url": "/documentation/aggrid#filter_rows_using_mini_filters"
  },
  {
    "title": "Aggrid: AG Grid with Conditional Cell Formatting",
    "content": "This demo shows how to use cellClassRules to conditionally format cells based on their values.",
    "url": "/documentation/aggrid#ag_grid_with_conditional_cell_formatting"
  },
  {
    "title": "Aggrid: Create Grid from Pandas Dataframe",
    "content": "You can create an AG Grid from a Pandas Dataframe using the from_pandas method. This method takes a Pandas Dataframe as input and returns an AG Grid.",
    "url": "/documentation/aggrid#create_grid_from_pandas_dataframe"
  },
  {
    "title": "Aggrid: Render columns as HTML",
    "content": "You can render columns as HTML by passing a list of column indices to the html_columns argument.",
    "url": "/documentation/aggrid#render_columns_as_html"
  },
  {
    "title": "Aggrid: Respond to an AG Grid event",
    "content": "All AG Grid events are passed through to NiceGUI via the AG Grid global listener. These events can be subscribed to using the .on() method.",
    "url": "/documentation/aggrid#respond_to_an_ag_grid_event"
  },
  {
    "title": "Aggrid: AG Grid with complex objects",
    "content": "You can use nested complex objects in AG Grid by separating the field names with a period. (This is the reason why keys in rowData are not allowed to contain periods.)",
    "url": "/documentation/aggrid#ag_grid_with_complex_objects"
  },
  {
    "title": "Aggrid: AG Grid with dynamic row height",
    "content": "You can set the height of individual rows by passing a function to the getRowHeight argument.",
    "url": "/documentation/aggrid#ag_grid_with_dynamic_row_height"
  },
  {
    "title": "Carousel",
    "content": "This element represents Quasar's QCarousel <https://quasar.dev/vue-components/carousel#qcarousel-api>_ component. It contains individual carousel slides.  :param value: ui.carousel_slide or name of the slide to be initially selected (default: None meaning the first slide) :param on_value_change: callback to be executed when the selected slide changes :param animated: whether to animate slide transitions (default: False) :param arrows: whether to show arrows for manual slide navigation (default: False) :param navigation: whether to show navigation dots for manual slide navigation (default: False) next Show the next slide.previous Show the previous slide.",
    "url": "/documentation/carousel"
  },
  {
    "title": "Slider",
    "content": "This element is based on Quasar's QSlider <https://quasar.dev/vue-components/slider>_ component.  :param min: lower bound of the slider :param max: upper bound of the slider :param step: step size :param value: initial value to set position of the slider :param on_change: callback which is invoked when the user releases the slider",
    "url": "/documentation/slider"
  },
  {
    "title": "Slider: Throttle events with leading and trailing options",
    "content": "By default the value change event of a slider is throttled to 0.05 seconds. This means that if you move the slider quickly, the value will only be updated every 0.05 seconds.  By default both \"leading\" and \"trailing\" events are activated. This means that the very first event is triggered immediately, and the last event is triggered after the throttle time.  This demo shows how disabling either of these options changes the behavior. To see the effect more clearly, the throttle time is set to 1 second. The first slider shows the default behavior, the second one only sends leading events, and the third only sends trailing events.",
    "url": "/documentation/slider#throttle_events_with_leading_and_trailing_options"
  },
  {
    "title": "Slider: Disable slider",
    "content": "You can disable a slider with the disable() method. This will prevent the user from moving the slider. The slider will also be grayed out.",
    "url": "/documentation/slider#disable_slider"
  },
  {
    "title": "Pagination",
    "content": "A pagination element wrapping Quasar's QPagination <https://quasar.dev/vue-components/pagination>_ component.  :param min: minimum page number :param max: maximum page number :param direction_links: whether to show first/last page links :param value: initial page (defaults to min if no value is provided) :param on_change: callback to be invoked when the value changes",
    "url": "/documentation/pagination"
  },
  {
    "title": "Grid Element",
    "content": "Provides a container which arranges its child in a grid.  :param rows: number of rows in the grid :param columns: number of columns in the grid",
    "url": "/documentation/grid"
  },
  {
    "title": "Label",
    "content": "Displays some text.  :param text: the content of the label",
    "url": "/documentation/label"
  },
  {
    "title": "Label: Change Appearance Depending on the Content",
    "content": "You can overwrite the _handle_text_change method to update other attributes of a label depending on its content. This technique also works for bindings as shown in the example below.",
    "url": "/documentation/label#change_appearance_depending_on_the_content"
  },
  {
    "title": "Radio Selection",
    "content": "This element is based on Quasar's QRadio <https://quasar.dev/vue-components/radio>_ component.  The options can be specified as a list of values, or as a dictionary mapping values to labels. After manipulating the options, call update() to update the options in the UI.  :param options: a list ['value1', ...] or dictionary 'value1':'label1', ... specifying the options :param value: the initial value :param on_change: callback to execute when selection changes",
    "url": "/documentation/radio"
  },
  {
    "title": "Page",
    "content": "This decorator marks a function to be a page builder. Each user accessing the given route will see a new instance of the page. This means it is private to the user and not shared with others (as it is done when placing elements outside of a page decorator <https://nicegui.io/documentation#auto-index_page>_).  :param path: route of the new page (path must start with '/') :param title: optional page title :param viewport: optional viewport meta tag content :param favicon: optional relative filepath or absolute URL to a favicon (default: None, NiceGUI icon will be used) :param dark: whether to use Quasar's dark mode (defaults to dark argument of run command) :param language: language of the page (defaults to language argument of run command) :param response_timeout: maximum time for the decorated function to build the page (default: 3.0 seconds) :param reconnect_timeout: maximum time the server waits for the browser to reconnect (default: 0.0 seconds) :param api_router: APIRouter instance to use, can be left None to use the default :param kwargs: additional keyword arguments passed to FastAPI's @app.get method resolve_title Return the title of the page.resolve_viewport Return the viewport of the page.resolve_dark Return whether the page should use dark mode.resolve_language Return the language of the page.",
    "url": "/documentation/page"
  },
  {
    "title": "Page: Pages with Path Parameters",
    "content": "Page routes can contain parameters like FastAPI. If type-annotated, they are automatically converted to bool, int, float and complex values. If the page function expects a request argument, the request object is automatically provided. The client argument provides access to the websocket connection, layout, etc.",
    "url": "/documentation/page#pages_with_path_parameters"
  },
  {
    "title": "Page: Wait for Client Connection",
    "content": "To wait for a client connection, you can add a client argument to the decorated page function and await client.connected(). All code below that statement is executed after the websocket connection between server and client has been established.  For example, this allows you to run JavaScript commands; which is only possible with a client connection (see #112). Also it is possible to do async stuff while the user already sees some content.",
    "url": "/documentation/page#wait_for_client_connection"
  },
  {
    "title": "Page: Modularize with APIRouter",
    "content": "You can use the NiceGUI specialization of FastAPI's APIRouter to modularize your code by grouping pages and other routes together. This is especially useful if you want to reuse the same prefix for multiple pages. The router and its pages can be neatly tugged away in a separate module (e.g. file) and the router is simply imported and included in the main app. See our modularization example for a multi-file app structure.",
    "url": "/documentation/page#modularize_with_apirouter"
  },
  {
    "title": "Scroll Area",
    "content": "A way of customizing the scrollbars by encapsulating your content. This element exposes the Quasar ScrollArea <https://quasar.dev/vue-components/scroll-area/>_ component.  :param on_scroll: function to be called when the scroll position changes scroll_to Set the scroll area position in percentage (float) or pixel number (int).  You can add a delay to the actual scroll action with the duration_ms parameter.  :param pixels: scroll position offset from top in pixels :param percent: scroll position offset from top in percentage of the total scrolling size :param axis: scroll axis :param duration: animation duration (in seconds, default: 0.0 means no animation)",
    "url": "/documentation/scroll_area"
  },
  {
    "title": "Scroll Area: Handling Scroll Events",
    "content": "You can use the on_scroll argument in ui.scroll_area to handle scroll events. The callback receives a ScrollEventArguments object with the following attributes:  - sender: the scroll area that generated the event - client: the matching client - additional arguments as described in Quasar's documentation for the ScrollArea API",
    "url": "/documentation/scroll_area#handling_scroll_events"
  },
  {
    "title": "Scroll Area: Setting the scroll position",
    "content": "You can use scroll_to to programmatically set the scroll position. This can be useful for navigation or synchronization of multiple scroll areas.",
    "url": "/documentation/scroll_area#setting_the_scroll_position"
  },
  {
    "title": "Text Input",
    "content": "This element is based on Quasar's QInput <https://quasar.dev/vue-components/input>_ component.  The on_change event is called on every keystroke and the value updates accordingly. If you want to wait until the user confirms the input, you can register a custom event callback, e.g. ui.input(...).on('keydown.enter', ...) or ui.input(...).on('blur', ...).  You can use the validation parameter to define a dictionary of validation rules. The key of the first rule that fails will be displayed as an error message.  Note about styling the input: Quasar's QInput component is a wrapper around a native input element. This means that you cannot style the input directly, but you can use the input-class and input-style props to style the native input element. See the \"Style\" props section on the QInput <https://quasar.dev/vue-components/input>_ documentation for more details.  :param label: displayed label for the text input :param placeholder: text to show if no value is entered :param value: the current value of the text input :param password: whether to hide the input (default: False) :param password_toggle_button: whether to show a button to toggle the password visibility (default: False) :param on_change: callback to execute when the value changes :param autocomplete: optional list of strings for autocompletion :param validation: dictionary of validation rules, e.g. `'Too long!': lambda value: len(value) < 3` set_autocomplete Set the autocomplete list.",
    "url": "/documentation/input"
  },
  {
    "title": "Input: Autocompletion",
    "content": "The autocomplete feature provides suggestions as you type, making input easier and faster. The parameter options is a list of strings that contains the available options that will appear.",
    "url": "/documentation/input#autocompletion"
  },
  {
    "title": "Input: Clearable",
    "content": "The clearable prop from Quasar adds a button to the input that clears the text.",
    "url": "/documentation/input#clearable"
  },
  {
    "title": "Input: Styling",
    "content": "Quasar has a lot of props to change the appearance. It is even possible to style the underlying input with input-style and input-class props and use the provided slots to add custom elements.",
    "url": "/documentation/input#styling"
  },
  {
    "title": "JSONEditor",
    "content": "An element to create a JSON editor using JSONEditor <https://github.com/josdejong/svelte-jsoneditor>_. Updates can be pushed to the editor by changing the properties property. After data has changed, call the update method to refresh the editor.  :param properties: dictionary of JSONEditor properties :param on_select: callback function that is called when some of the content has been selected :param on_change: callback function that is called when the content has changed update",
    "url": "/documentation/json_editor"
  },
  {
    "title": "Menu",
    "content": "Creates a menu based on Quasar's QMenu <https://quasar.dev/vue-components/menu>_ component. The menu should be placed inside the element where it should be shown.  :param value: whether the menu is already opened (default: False) open Open the menu.close Close the menu.toggle Toggle the menu.props",
    "url": "/documentation/menu"
  },
  {
    "title": "Joystick",
    "content": "Create a joystick based on nipple.js <https://yoannmoi.net/nipplejs/>_.  :param on_start: callback for when the user touches the joystick :param on_move: callback for when the user moves the joystick :param on_end: callback for when the user releases the joystick :param throttle: throttle interval in seconds for the move event (default: 0.05) :param options: arguments like color which should be passed to the underlying nipple.js library <https://github.com/yoannmoinet/nipplejs#options>_",
    "url": "/documentation/joystick"
  },
  {
    "title": "Circular Progress",
    "content": "A circular progress bar wrapping Quasar's QCircularProgress <https://quasar.dev/vue-components/circular-progress>_.  :param value: the initial value of the field :param min: the minimum value (default: 0.0) :param max: the maximum value (default: 1.0) :param size: the size of the progress circle (default: \"xl\") :param show_value: whether to show a value label in the center (default: True) :param color: color (either a Quasar, Tailwind, or CSS color or None, default: \"primary\")",
    "url": "/documentation/circular_progress"
  },
  {
    "title": "Circular Progress: Nested Elements",
    "content": "You can put any element like icon, button etc inside a circular progress using the with statement. Just make sure it fits the bounds and disable the default behavior of showing the value.",
    "url": "/documentation/circular_progress#nested_elements"
  },
  {
    "title": "Toggle",
    "content": "This element is based on Quasar's QBtnToggle <https://quasar.dev/vue-components/button-toggle>_ component.  The options can be specified as a list of values, or as a dictionary mapping values to labels. After manipulating the options, call update() to update the options in the UI.  :param options: a list ['value1', ...] or dictionary 'value1':'label1', ... specifying the options :param value: the initial value :param on_change: callback to execute when selection changes :param clearable: whether the toggle can be cleared by clicking the selected option",
    "url": "/documentation/toggle"
  },
  {
    "title": "Highcharts chart",
    "content": "An element to create a chart using Highcharts <https://www.highcharts.com/>_. Updates can be pushed to the chart by changing the options property. After data has changed, call the update method to refresh the chart.  Due to Highcharts' restrictive license, this element is not part of the standard NiceGUI package. It is maintained in a separate repository <https://github.com/zauberzeug/nicegui-highcharts/>_ and can be installed with pip install nicegui[highcharts].  By default, a Highcharts.chart is created. To use, e.g., Highcharts.stockChart instead, set the type property to \"stockChart\".  :param options: dictionary of Highcharts options :param type: chart type (e.g. \"chart\", \"stockChart\", \"mapChart\", ...; default: \"chart\") :param extras: list of extra dependencies to include (e.g. \"annotations\", \"arc-diagram\", \"solid-gauge\", ...) :param on_point_click: callback function that is called when a point is clicked :param on_point_drag_start: callback function that is called when a point drag starts :param on_point_drag: callback function that is called when a point is dragged :param on_point_drop: callback function that is called when a point is dropped update",
    "url": "/documentation/highchart"
  },
  {
    "title": "Highchart: Chart with extra dependencies",
    "content": "To use a chart type that is not included in the default dependencies, you can specify extra dependencies. This demo shows a solid gauge chart.",
    "url": "/documentation/highchart#chart_with_extra_dependencies"
  },
  {
    "title": "Highchart: Chart with draggable points",
    "content": "This chart allows dragging the series points. You can register callbacks for the following events:  - on_point_click: called when a point is clicked - on_point_drag_start: called when a point drag starts - on_point_drag: called when a point is dragged - on_point_drop: called when a point is dropped",
    "url": "/documentation/highchart#chart_with_draggable_points"
  },
  {
    "title": "Editor",
    "content": "A WYSIWYG editor based on Quasar's QEditor <https://quasar.dev/vue-components/editor>_. The value is a string containing the formatted text as HTML code.  :param value: initial value :param on_change: callback to be invoked when the value changes",
    "url": "/documentation/editor"
  },
  {
    "title": "Keyboard",
    "content": "Adds global keyboard event tracking.  :param on_key: callback to be executed when keyboard events occur. :param active: boolean flag indicating whether the callback should be executed or not (default: True) :param repeating: boolean flag indicating whether held keys should be sent repeatedly (default: True) :param ignore: ignore keys when one of these element types is focussed (default: ['input', 'select', 'button', 'textarea'])",
    "url": "/documentation/keyboard"
  },
  {
    "title": "Stepper",
    "content": "This element represents Quasar's QStepper <https://quasar.dev/vue-components/stepper#qstepper-api>_ component. It contains individual steps.  To avoid issues with dynamic elements when switching steps, this element uses Vue's keep-alive <https://vuejs.org/guide/built-ins/keep-alive.html>_ component. If client-side performance is an issue, you can disable this feature.  :param value: ui.step or name of the step to be initially selected (default: None meaning the first step) :param on_value_change: callback to be executed when the selected step changes :param keep_alive: whether to use Vue's keep-alive component on the content (default: True) next Show the next step.previous Show the previous step.",
    "url": "/documentation/stepper"
  },
  {
    "title": "Row Element",
    "content": "Provides a container which arranges its child in a row.  :param wrap: whether to wrap the content (default: True)",
    "url": "/documentation/row"
  },
  {
    "title": "Mermaid Diagrams",
    "content": "Renders diagrams and charts written in the Markdown-inspired Mermaid <https://mermaid.js.org/>_ language. The mermaid syntax can also be used inside Markdown elements by providing the extension string 'mermaid' to the `ui.markdown` element.  :param content: the Mermaid content to be displayed",
    "url": "/documentation/mermaid"
  },
  {
    "title": "Shut down NiceGUI.",
    "content": "This will programmatically stop the server. Only possible when auto-reload is disabled.",
    "url": "/documentation/shutdown"
  },
  {
    "title": "Interactive Image",
    "content": "Create an image with an SVG overlay that handles mouse events and yields image coordinates. It is also the best choice for non-flickering image updates. If the source URL changes faster than images can be loaded by the browser, some images are simply skipped. Thereby repeatedly updating the image source will automatically adapt to the available bandwidth. See OpenCV Webcam <https://github.com/zauberzeug/nicegui/tree/main/examples/opencv_webcam/main.py>_ for an example.  :param source: the source of the image; can be an URL, local file path or a base64 string :param content: SVG content which should be overlaid; viewport has the same dimensions as the image :param on_mouse: callback for mouse events (yields type, image_x and image_y) :param events: list of JavaScript events to subscribe to (default: ['click']) :param cross: whether to show crosshairs (default: False)",
    "url": "/documentation/interactive_image"
  },
  {
    "title": "Interactive Image: Nesting elements",
    "content": "You can nest elements inside an interactive image. Use Tailwind classes like \"absolute top-0 left-0\" to position the label absolutely with respect to the image. Of course this can be done with plain CSS as well.",
    "url": "/documentation/interactive_image#nesting_elements"
  },
  {
    "title": "Expansion Element",
    "content": "Provides an expandable container based on Quasar's QExpansionItem <https://quasar.dev/vue-components/expansion-item>_ component.  :param text: title text :param icon: optional icon (default: None) :param value: whether the expansion should be opened on creation (default: False) :param on_value_change: callback to execute when value changes open Open the expansion.close Close the expansion.",
    "url": "/documentation/expansion"
  },
  {
    "title": "Expansion: Expansion with Custom Header",
    "content": "Instead of setting a plain-text title, you can fill the expansion header with UI elements by adding them to the \"header\" slot.",
    "url": "/documentation/expansion#expansion_with_custom_header"
  },
  {
    "title": "Dialog",
    "content": "Creates a dialog based on Quasar's QDialog <https://quasar.dev/vue-components/dialog>_ component. By default it is dismissible by clicking or pressing ESC. To make it persistent, set .props('persistent') on the dialog element.  :param value: whether the dialog should be opened on creation (default: False) open Open the dialog.close Close the dialog.submit Submit the dialog with the given result.",
    "url": "/documentation/dialog"
  },
  {
    "title": "Dialog: Awaitable dialog",
    "content": "Dialogs can be awaited. Use the submit method to close the dialog and return a result. Canceling the dialog by clicking in the background or pressing the escape key yields None.",
    "url": "/documentation/dialog#awaitable_dialog"
  },
  {
    "title": "Dialog: Replacing content",
    "content": "The content of a dialog can be changed.",
    "url": "/documentation/dialog#replacing_content"
  },
  {
    "title": "Tree",
    "content": "Display hierarchical data using Quasar's QTree <https://quasar.dev/vue-components/tree>_ component.  If using IDs, make sure they are unique within the whole tree.  To use checkboxes and `on_tick, set the tick_strategy parameter to \"leaf\", \"leaf-filtered\" or \"strict\".  :param nodes: hierarchical list of node objects :param node_key: property name of each node object that holds its unique id (default: \"id\") :param label_key: property name of each node object that holds its label (default: \"label\") :param children_key: property name of each node object that holds its list of children (default: \"children\") :param on_select: callback which is invoked when the node selection changes :param on_expand: callback which is invoked when the node expansion changes :param on_tick: callback which is invoked when a node is ticked or unticked :param tick_strategy: whether and how to use checkboxes (\"leaf\", \"leaf-filtered\" or \"strict\"; default: None) :param default_expand_all: whether to expand all nodes by default (default: False`) expand Expand the given nodes.  :param node_keys: list of node keys to expand (default: all nodes) collapse Collapse the given nodes.  :param node_keys: list of node keys to collapse (default: all nodes) props",
    "url": "/documentation/tree"
  },
  {
    "title": "Tree: Tree with custom header and body",
    "content": "Scoped slots can be used to insert custom content into the header and body of a tree node. See the Quasar documentation for more information.",
    "url": "/documentation/tree#tree_with_custom_header_and_body"
  },
  {
    "title": "Tree: Expand and collapse programmatically",
    "content": "The whole tree or individual nodes can be toggled programmatically using the expand() and collapse() methods. This even works if a node is disabled (e.g. not clickable by the user).",
    "url": "/documentation/tree#expand_and_collapse_programmatically"
  },
  {
    "title": "Tree: Tree with checkboxes",
    "content": "The tree can be used with checkboxes by setting the \"tick-strategy\" prop.",
    "url": "/documentation/tree#tree_with_checkboxes"
  },
  {
    "title": "Switch",
    "content": "This element is based on Quasar's QToggle <https://quasar.dev/vue-components/toggle>_ component.  :param text: the label to display next to the switch :param value: whether it should be active initially (default: False) :param on_change: callback which is invoked when state is changed by the user",
    "url": "/documentation/switch"
  },
  {
    "title": "Table",
    "content": "A table based on Quasar's QTable <https://quasar.dev/vue-components/table>_ component.  :param columns: list of column objects :param rows: list of row objects :param row_key: name of the column containing unique data identifying the row (default: \"id\") :param title: title of the table :param selection: selection type (\"single\" or \"multiple\"; default: None) :param pagination: A dictionary correlating to a pagination object or number of rows per page (None hides the pagination, 0 means \"infinite\"; default: None). :param on_select: callback which is invoked when the selection changes  If selection is 'single' or 'multiple', then a selected property is accessible containing the selected rows. set_fullscreen Set fullscreen mode.toggle_fullscreen Toggle fullscreen mode.add_rows Add rows to the table.remove_rows Remove rows from the table.",
    "url": "/documentation/table"
  },
  {
    "title": "Table: Table with expandable rows",
    "content": "Scoped slots can be used to insert buttons that toggle the expand state of a table row. See the Quasar documentation for more information.",
    "url": "/documentation/table#table_with_expandable_rows"
  },
  {
    "title": "Table: Show and hide columns",
    "content": "Here is an example of how to show and hide columns in a table.",
    "url": "/documentation/table#show_and_hide_columns"
  },
  {
    "title": "Table: Table with drop down selection",
    "content": "Here is an example of how to use a drop down selection in a table. After emitting a rename event from the scoped slot, the rename function updates the table rows.",
    "url": "/documentation/table#table_with_drop_down_selection"
  },
  {
    "title": "Table: Table from pandas dataframe",
    "content": "Here is a demo of how to create a table from a pandas dataframe.",
    "url": "/documentation/table#table_from_pandas_dataframe"
  },
  {
    "title": "Table: Adding rows",
    "content": "It's simple to add new rows with the add_rows(dict) method.",
    "url": "/documentation/table#adding_rows"
  },
  {
    "title": "Table: Custom sorting and formatting",
    "content": "You can define dynamic column attributes using a : prefix. This way you can define custom sorting and formatting functions.  The following example allows sorting the name column by length. The age column is formatted to show the age in years.",
    "url": "/documentation/table#custom_sorting_and_formatting"
  },
  {
    "title": "Table: Toggle fullscreen",
    "content": "You can toggle the fullscreen mode of a table using the toggle_fullscreen() method.",
    "url": "/documentation/table#toggle_fullscreen"
  },
  {
    "title": "Table: Pagination",
    "content": "You can provide either a single integer or a dictionary to define pagination.  The dictionary can contain the following keys:  - rowsPerPage: The number of rows per page. - sortBy: The column name to sort by. - descending: Whether to sort in descending order. - page: The current page (1-based).",
    "url": "/documentation/table#pagination"
  },
  {
    "title": "Table: Computed fields",
    "content": "You can use functions to compute the value of a column. The function receives the row as an argument. See the Quasar documentation for more information.",
    "url": "/documentation/table#computed_fields"
  },
  {
    "title": "Table: Conditional formatting",
    "content": "You can use scoped slots to conditionally format the content of a cell. See the Quasar documentation for more information about body-cell slots.  In this demo we use a q-badge to display the age in red if the person is under 21 years old. We use the body-cell-age slot to insert the q-badge into the age column. The \":color\" attribute of the q-badge is set to \"red\" if the age is under 21, otherwise it is set to \"green\". The colon in front of the \"color\" attribute indicates that the value is a JavaScript expression.",
    "url": "/documentation/table#conditional_formatting"
  },
  {
    "title": "Table: Table cells with links",
    "content": "Here is a demo of how to insert links into table cells. We use the body-cell-link slot to insert an <a> tag into the link column.",
    "url": "/documentation/table#table_cells_with_links"
  },
  {
    "title": "Notification",
    "content": "Displays a notification on the screen.  :param message: content of the notification :param position: position on the screen (\"top-left\", \"top-right\", \"bottom-left\", \"bottom-right\", \"top\", \"bottom\", \"left\", \"right\" or \"center\", default: \"bottom\") :param close_button: optional label of a button to dismiss the notification (default: False) :param type: optional type (\"positive\", \"negative\", \"warning\", \"info\" or \"ongoing\") :param color: optional color name :param multi_line: enable multi-line notifications  Note: You can pass additional keyword arguments according to Quasar's Notify API <https://quasar.dev/quasar-plugins/notify#notify-api>_.",
    "url": "/documentation/notify"
  },
  {
    "title": "Notify: Notification Types",
    "content": "There are different types that can be used to indicate the nature of the notification.",
    "url": "/documentation/notify#notification_types"
  },
  {
    "title": "Notify: Multiline Notifications",
    "content": "To allow a notification text to span multiple lines, it is sufficient to set multi_line=True. If manual newline breaks are required (e.g. ), you need to define a CSS style and pass it to the notification as shown in the example.",
    "url": "/documentation/notify#multiline_notifications"
  },
  {
    "title": "Storage",
    "content": "NiceGUI offers a straightforward method for data persistence within your application. It features three built-in storage types:  - app.storage.user: Stored server-side, each dictionary is associated with a unique identifier held in a browser session cookie. Unique to each user, this storage is accessible across all their browser tabs. app.storage.browser['id'] is used to identify the user. - app.storage.general: Also stored server-side, this dictionary provides a shared storage space accessible to all users. - app.storage.browser: Unlike the previous types, this dictionary is stored directly as the browser session cookie, shared among all browser tabs for the same user. However, app.storage.user is generally preferred due to its advantages in reducing data payload, enhancing security, and offering larger storage capacity. By default, NiceGUI holds a unique identifier for the browser session in app.storage.browser['id'].  The user storage and browser storage are only available within page builder functions </documentation/page>_ because they are accessing the underlying Request object from FastAPI. Additionally these two types require the storage_secret parameter inui.run() to encrypt the browser session cookie.",
    "url": "/documentation/storage"
  },
  {
    "title": "Storage: Counting page visits",
    "content": "Here we are using the automatically available browser-stored session ID to count the number of unique page visits.",
    "url": "/documentation/storage#counting_page_visits"
  },
  {
    "title": "Storage: Storing UI state",
    "content": "Storage can also be used in combination with bindings. Here we are storing the value of a textarea between visits. The note is also shared between all tabs of the same user.",
    "url": "/documentation/storage#storing_ui_state"
  },
  {
    "title": "Refreshable UI functions",
    "content": "The @ui.refreshable decorator allows you to create functions that have a refresh method. This method will automatically delete all elements created by the function and recreate them. refresh Refresh the UI elements created by this function.prune Remove all targets that are no longer on a page with a client connection.  This method is called automatically before each refresh.",
    "url": "/documentation/refreshable"
  },
  {
    "title": "Refreshable: Refreshable UI with parameters",
    "content": "Here is a demo of how to use the refreshable decorator to create a UI that can be refreshed with different parameters.",
    "url": "/documentation/refreshable#refreshable_ui_with_parameters"
  },
  {
    "title": "Refreshable: Refreshable UI for input validation",
    "content": "Here is a demo of how to use the refreshable decorator to give feedback about the validity of user input.",
    "url": "/documentation/refreshable#refreshable_ui_for_input_validation"
  },
  {
    "title": "Refreshable: Refreshable UI with reactive state",
    "content": "You can create reactive state variables with the ui.state function, like count and color in this demo. They can be used like normal variables for creating UI elements like the ui.label. Their corresponding setter functions can be used to set new values, which will automatically refresh the UI.",
    "url": "/documentation/refreshable#refreshable_ui_with_reactive_state"
  },
  {
    "title": "Color Input",
    "content": "This element extends Quasar's QInput <https://quasar.dev/vue-components/input>_ component with a color picker.  :param label: displayed label for the color input :param placeholder: text to show if no color is selected :param value: the current color value :param on_change: callback to execute when the value changes :param preview: change button background to selected color (default: False) open_picker Open the color picker",
    "url": "/documentation/color_input"
  },
  {
    "title": "Timeline",
    "content": "This element represents Quasar's QTimeline <https://quasar.dev/vue-components/timeline#qtimeline-api>_ component.  :param side: Side (\"left\" or \"right\"; default: \"left\"). :param layout: Layout (\"dense\", \"comfortable\" or \"loose\"; default: \"dense\"). :param color: Color of the icons.",
    "url": "/documentation/timeline"
  },
  {
    "title": "Textarea",
    "content": "This element is based on Quasar's QInput <https://quasar.dev/vue-components/input>_ component. The `type is set to textarea to create a multi-line text input.  You can use the validation parameter to define a dictionary of validation rules. The key of the first rule that fails will be displayed as an error message.  :param label: displayed name for the textarea :param placeholder: text to show if no value is entered :param value: the initial value of the field :param on_change: callback to execute when the value changes :param validation: dictionary of validation rules, e.g. 'Too long!': lambda value: len(value) < 3`",
    "url": "/documentation/textarea"
  },
  {
    "title": "Textarea: Clearable",
    "content": "The clearable prop from Quasar adds a button to the input that clears the text.",
    "url": "/documentation/textarea#clearable"
  },
  {
    "title": "Video",
    "content": "Displays a video.  :param src: URL or local file path of the video source :param controls: whether to show the video controls, like play, pause, and volume (default: True) :param autoplay: whether to start playing the video automatically (default: False) :param muted: whether the video should be initially muted (default: False) :param loop: whether the video should loop (default: False)  See here <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video#events>_ for a list of events you can subscribe to using the generic event subscription on(). seek Seek to a specific position in the video.  :param seconds: the position in seconds play Play video.pause Pause video.",
    "url": "/documentation/video"
  },
  {
    "title": "Video: Control the video element",
    "content": "This demo shows how to play, pause and seek programmatically.",
    "url": "/documentation/video#control_the_video_element"
  },
  {
    "title": "Date Input",
    "content": "This element is based on Quasar's QDate <https://quasar.dev/vue-components/date>_ component. The date is a string in the format defined by the mask parameter.  You can also use the range or multiple props to select a range of dates or multiple dates::  ui.date('from': '2023-01-01', 'to': '2023-01-05').props('range') ui.date(['2023-01-01', '2023-01-02', '2023-01-03']).props('multiple') ui.date(['from': '2023-01-01', 'to': '2023-01-05', '2023-01-07']).props('multiple range')  :param value: the initial date :param mask: the format of the date string (default: 'YYYY-MM-DD') :param on_change: callback to execute when changing the date",
    "url": "/documentation/date"
  },
  {
    "title": "Date: Input element with date picker",
    "content": "This demo shows how to implement a date picker with an input element. We place an icon in the input element's append slot. When the icon is clicked, we open a menu with a date picker.  The date is bound to the input element's value. So both the input element and the date picker will stay in sync whenever the date is changed.",
    "url": "/documentation/date#input_element_with_date_picker"
  },
  {
    "title": "Date: Date filter",
    "content": "This demo shows how to filter the dates in a date picker. In order to pass a function to the date picker, we use the :options property. The leading : tells NiceGUI that the value is a JavaScript expression.",
    "url": "/documentation/date#date_filter"
  },
  {
    "title": "Card",
    "content": "This element is based on Quasar's QCard <https://quasar.dev/vue-components/card>_ component. It provides a container with a dropped shadow.  Note: There are subtle differences between the Quasar component and this element. In contrast to this element, the original QCard has no padding by default and hides outer borders of nested elements. If you want the original behavior, use the tight method. If you want the padding and borders for nested children, move the children into another container. tight Remove padding and gaps between nested elements.",
    "url": "/documentation/card"
  },
  {
    "title": "Card: Card without shadow",
    "content": "You can remove the shadow from a card by adding the no-shadow class. The following demo shows a 1 pixel wide border instead.",
    "url": "/documentation/card#card_without_shadow"
  },
  {
    "title": "Card: The issue with nested borders",
    "content": "The following example shows a table nested in a card. Cards have a default padding in NiceGUI, so the table is not flush with the card's border. The table has the flat and bordered props set, so it should have a border. However, due to the way QCard is designed, the border is not visible (first card). There are two ways to fix this:  - To get the original QCard behavior, use the tight method (second card). It removes the padding and the table border collapses with the card border.  - To preserve the padding _and_ the table border, move the table into another container like a ui.row (third card).  See https://github.com/zauberzeug/nicegui/issues/726 for more information.",
    "url": "/documentation/card#the_issue_with_nested_borders"
  },
  {
    "title": "Dark mode",
    "content": "You can use this element to enable, disable or toggle dark mode on the page. The value None represents auto mode, which uses the client's system preference.  Note that this element overrides the dark parameter of the ui.run function and page decorators.  :param value: Whether dark mode is enabled. If None, dark mode is set to auto. :param on_change: Callback that is invoked when the value changes. enable Enable dark mode.disable Disable dark mode.toggle Toggle dark mode.  This method will raise a ValueError if dark mode is set to auto. auto Set dark mode to auto.  This will use the client's system preference.",
    "url": "/documentation/dark_mode"
  },
  {
    "title": "Generic Element",
    "content": "This class is the base class for all other UI elements. But you can use it to create elements with arbitrary HTML tags.  :param tag: HTML tag of the element :param _client: client for this element (for internal use only) add_slot Add a slot to the element.  :param name: name of the slot :param template: Vue template of the slot :return: the slot classes Apply, remove, or replace HTML classes.  This allows modifying the look of the element or its layout using Tailwind <https://tailwindcss.com/>_ or Quasar <https://quasar.dev/>_ classes.  Removing or replacing classes can be helpful if predefined classes are not desired.  :param add: whitespace-delimited string of classes :param remove: whitespace-delimited string of classes to remove from the element :param replace: whitespace-delimited string of classes to use instead of existing ones style Apply, remove, or replace CSS definitions.  Removing or replacing styles can be helpful if the predefined style is not desired.  :param add: semicolon-separated list of styles to add to the element :param remove: semicolon-separated list of styles to remove from the element :param replace: semicolon-separated list of styles to use instead of existing ones props Add or remove props.  This allows modifying the look of the element or its layout using Quasar <https://quasar.dev/>_ props. Since props are simply applied as HTML attributes, they can be used with any HTML element.  Boolean properties are assumed `True if no value is specified.  :param add: whitespace-delimited list of either boolean values or key=value pair to add :param remove: whitespace-delimited list of property keys to remove tooltip Add a tooltip to the element.  :param text: text of the tooltip on Subscribe to an event.  :param type: name of the event (e.g. \"click\", \"mousedown\", or \"update:model-value\") :param handler: callback that is called upon occurrence of the event :param args: arguments included in the event message sent to the event handler (default: None meaning all) :param throttle: minimum time (in seconds) between event occurrences (default: 0.0) :param leading_events: whether to trigger the event handler immediately upon the first event occurrence (default: True) :param trailing_events: whether to trigger the event handler after the last event occurrence (default: True`) update Update the element on the client side.run_method Run a method on the client side.  If the function is awaited, the result of the method call is returned. Otherwise, the method is executed without waiting for a response.  :param name: name of the method :param args: arguments to pass to the method clear Remove all child elements.move Move the element to another container.  :param target_container: container to move the element to (default: the parent container) :param target_index: index within the target slot (default: append to the end) remove Remove a child element.  :param element: either the element instance or its ID delete Delete the element.",
    "url": "/documentation/element"
  },
  {
    "title": "Element: Move elements",
    "content": "This demo shows how to move elements between or within containers.",
    "url": "/documentation/element#move_elements"
  },
  {
    "title": "Element: Default props",
    "content": "You can set default props for all elements of a certain class. This way you can avoid repeating the same props over and over again.  Default props only apply to elements created after the default props were set. Subclasses inherit the default props of their parent class.",
    "url": "/documentation/element#default_props"
  },
  {
    "title": "Element: Default classes",
    "content": "You can set default classes for all elements of a certain class. This way you can avoid repeating the same classes over and over again.  Default classes only apply to elements created after the default classes were set. Subclasses inherit the default classes of their parent class.",
    "url": "/documentation/element#default_classes"
  },
  {
    "title": "Element: Default style",
    "content": "You can set a default style for all elements of a certain class. This way you can avoid repeating the same style over and over again.  A default style only applies to elements created after the default style was set. Subclasses inherit the default style of their parent class.",
    "url": "/documentation/element#default_style"
  },
  {
    "title": "Time Input",
    "content": "This element is based on Quasar's QTime <https://quasar.dev/vue-components/date>_ component. The time is a string in the format defined by the mask parameter.  :param value: the initial time :param mask: the format of the time string (default: 'HH:mm') :param on_change: callback to execute when changing the time",
    "url": "/documentation/time"
  },
  {
    "title": "Splitter",
    "content": "The ui.splitter element divides the screen space into resizable sections, allowing for flexible and responsive layouts in your application.  Based on Quasar's Splitter component: Splitter <https://quasar.dev/vue-components/splitter>_  It provides three customizable slots, `before, after, and separator`, which can be used to embed other elements within the splitter.  :param horizontal: Whether to split horizontally instead of vertically :param limits: Two numbers representing the minimum and maximum split size of the two panels :param value: Size of the first panel (or second if using reverse) :param reverse: Whether to apply the model size to the second panel instead of the first :param on_change: callback which is invoked when the user releases the splitter",
    "url": "/documentation/splitter"
  },
  {
    "title": "Splitter: Advanced usage",
    "content": "This demo shows all the slots and parameters including a tooltip, a custom separator, and a callback.",
    "url": "/documentation/splitter#advanced_usage"
  },
  {
    "title": "Splitter: Image fun",
    "content": "This demo shows how to use the splitter to display images side by side.",
    "url": "/documentation/splitter#image_fun"
  },
  {
    "title": "Image",
    "content": "Displays an image. This element is based on Quasar's QImg <https://quasar.dev/vue-components/img>_ component.  :param source: the source of the image; can be a URL, local file path or a base64 string",
    "url": "/documentation/image"
  },
  {
    "title": "Image: Local files",
    "content": "You can use local images as well by passing a path to the image file.",
    "url": "/documentation/image#local_files"
  },
  {
    "title": "Image: Base64 string",
    "content": "You can also use a Base64 string as image source.",
    "url": "/documentation/image#base64_string"
  },
  {
    "title": "Image: Lottie files",
    "content": "You can also use Lottie files with animations.",
    "url": "/documentation/image#lottie_files"
  },
  {
    "title": "Image: Image link",
    "content": "Images can link to another page by wrapping them in a ui.link.",
    "url": "/documentation/image#image_link"
  },
  {
    "title": "Color Theming",
    "content": "Sets the main colors (primary, secondary, accent, ...) used by Quasar <https://quasar.dev/>_.",
    "url": "/documentation/colors"
  },
  {
    "title": "Number Input",
    "content": "This element is based on Quasar's QInput <https://quasar.dev/vue-components/input>_ component.  You can use the validation parameter to define a dictionary of validation rules. The key of the first rule that fails will be displayed as an error message.  :param label: displayed name for the number input :param placeholder: text to show if no value is entered :param value: the initial value of the field :param min: the minimum value allowed :param max: the maximum value allowed :param step: the step size for the stepper buttons :param prefix: a prefix to prepend to the displayed value :param suffix: a suffix to append to the displayed value :param format: a string like \"%.2f\" to format the displayed value :param on_change: callback to execute when the value changes :param validation: dictionary of validation rules, e.g. `'Too large!': lambda value: value < 3` sanitize Sanitize the current value to be within the allowed limits.",
    "url": "/documentation/number"
  },
  {
    "title": "Number: Clearable",
    "content": "The clearable prop from Quasar adds a button to the input that clears the text.",
    "url": "/documentation/number#clearable"
  },
  {
    "title": "Dropdown Selection",
    "content": "This element is based on Quasar's QSelect <https://quasar.dev/vue-components/select>_ component.  The options can be specified as a list of values, or as a dictionary mapping values to labels. After manipulating the options, call update() to update the options in the UI.  If with_input is True, an input field is shown to filter the options.  If new_value_mode is not None, it implies with_input=True and the user can enter new values in the input field. See Quasar's documentation <https://quasar.dev/vue-components/select#the-new-value-mode-prop>_ for details.  :param options: a list ['value1', ...] or dictionary 'value1':'label1', ... specifying the options :param label: the label to display above the selection :param value: the initial value :param on_change: callback to execute when selection changes :param with_input: whether to show an input field to filter the options :param new_value_mode: handle new values from user input (default: None, i.e. no new values) :param multiple: whether to allow multiple selections :param clearable: whether to add a button to clear the selection",
    "url": "/documentation/select"
  },
  {
    "title": "Select: Search-as-you-type",
    "content": "You can activate with_input to get a text input with autocompletion. The options will be filtered as you type.",
    "url": "/documentation/select#search-as-you-type"
  },
  {
    "title": "Select: Multi selection",
    "content": "You can activate multiple to allow the selection of more than one item.",
    "url": "/documentation/select#multi_selection"
  },
  {
    "title": "Select: Update options",
    "content": "Options can be changed with the options property. But then you also need to call update() afterwards to let the change take effect. set_options is a shortcut that does both and works well for lambdas.",
    "url": "/documentation/select#update_options"
  },
  {
    "title": "Separator",
    "content": "This element is based on Quasar's QSeparator <https://quasar.dev/vue-components/separator>_ component.  It serves as a separator for cards, menus and other component containers and is similar to HTML's <hr> tag.",
    "url": "/documentation/separator"
  },
  {
    "title": "Badge",
    "content": "A badge element wrapping Quasar's QBadge <https://quasar.dev/vue-components/badge>_ component.  :param text: the initial value of the text field :param color: the color name for component (either a Quasar, Tailwind, or CSS color or None, default: \"primary\") :param text_color: text color (either a Quasar, Tailwind, or CSS color or None, default: None) :param outline: use 'outline' design (colored text and borders only) (default: False)",
    "url": "/documentation/badge"
  },
  {
    "title": "Plotly Element",
    "content": "Renders a Plotly chart. There are two ways to pass a Plotly figure for rendering, see parameter figure:  * Pass a go.Figure object, see https://plotly.com/python/  * Pass a Python dict object with keys data, layout, config (optional), see https://plotly.com/javascript/  For best performance, use the declarative dict approach for creating a Plotly chart.  :param figure: Plotly figure to be rendered. Can be either a go.Figure instance, or a dict object with keys data, layout, config (optional). update_figure Overrides figure instance of this Plotly chart and updates chart on client side.update",
    "url": "/documentation/plotly"
  },
  {
    "title": "Plotly: Dictionary interface",
    "content": "This demo shows how to use the declarative dictionary interface to create a plot. For plots with many traces and data points, this is more efficient than the object-oriented interface. The definition corresponds to the JavaScript Plotly API. Due to different defaults, the resulting plot may look slightly different from the same plot created with the object-oriented interface, but the functionality is the same.",
    "url": "/documentation/plotly#dictionary_interface"
  },
  {
    "title": "Plotly: Plot updates",
    "content": "This demo shows how to update the plot in real time. Click the button to add a new trace to the plot. To send the new plot to the browser, make sure to explicitly call plot.update() or ui.update(plot).",
    "url": "/documentation/plotly#plot_updates"
  },
  {
    "title": "HTML Element",
    "content": "Renders arbitrary HTML onto the page. Tailwind <https://tailwindcss.com/>_ can be used for styling. You can also use ui.add_head_html to add html code into the head of the document and ui.add_body_html to add it into the body.  :param content: the HTML code to be displayed",
    "url": "/documentation/html"
  },
  {
    "title": "Color Picker",
    "content": "This element is based on Quasar's QMenu <https://quasar.dev/vue-components/menu>_ and QColor <https://quasar.dev/vue-components/color>_ components.  :param on_pick: callback to execute when a color is picked :param value: whether the menu is already opened (default: False) set_color Set the color of the picker.  :param color: the color to set",
    "url": "/documentation/color_picker"
  },
  {
    "title": "Markdown Element",
    "content": "Renders Markdown onto the page.  :param content: the Markdown content to be displayed :param extras: list of markdown2 extensions <https://github.com/trentm/python-markdown2/wiki/Extras#implemented-extras>_ (default: ['fenced-code-blocks', 'tables'])",
    "url": "/documentation/markdown"
  },
  {
    "title": "Markdown: Markdown with indentation",
    "content": "Common indentation is automatically stripped from the beginning of each line. So you can indent markdown elements, and they will still be rendered correctly.",
    "url": "/documentation/markdown#markdown_with_indentation"
  },
  {
    "title": "Markdown: Markdown with code blocks",
    "content": "You can use code blocks to show code examples. If you specify the language after the opening triple backticks, the code will be syntax highlighted. See the Pygments website for a list of supported languages.",
    "url": "/documentation/markdown#markdown_with_code_blocks"
  },
  {
    "title": "Markdown: Markdown tables",
    "content": "By activating the \"tables\" extra, you can use Markdown tables. See the markdown2 documentation for a list of available extras.",
    "url": "/documentation/markdown#markdown_tables"
  },
  {
    "title": "Apache EChart",
    "content": "An element to create a chart using ECharts <https://echarts.apache.org/>_. Updates can be pushed to the chart by changing the options property. After data has changed, call the update method to refresh the chart.  :param options: dictionary of EChart options :param on_click_point: callback function that is called when a point is clicked update",
    "url": "/documentation/echart"
  },
  {
    "title": "Echart: EChart with clickable points",
    "content": "You can register a callback for an event when a series point is clicked.",
    "url": "/documentation/echart#echart_with_clickable_points"
  },
  {
    "title": "Echart: EChart with dynamic properties",
    "content": "Dynamic properties can be passed to chart elements to customize them such as apply an axis label format. To make a property dynamic, prefix a colon \":\" to the property name.",
    "url": "/documentation/echart#echart_with_dynamic_properties"
  },
  {
    "title": "Generic Events",
    "content": "Most UI elements come with predefined events. For example, a ui.button like \"A\" in the demo has an on_click parameter that expects a coroutine or function. But you can also use the on method to register a generic event handler like for \"B\". This allows you to register handlers for any event that is supported by JavaScript and Quasar.  For example, you can register a handler for the mousemove event like for \"C\", even though there is no on_mousemove parameter for ui.button. Some events, like mousemove, are fired very often. To avoid performance issues, you can use the throttle parameter to only call the handler every throttle seconds (\"D\").  The generic event handler can be synchronous or asynchronous and optionally takes GenericEventArguments as argument (\"E\"). You can also specify which attributes of the JavaScript or Quasar event should be passed to the handler (\"F\"). This can reduce the amount of data that needs to be transferred between the server and the client.  Here you can find more information about the events that are supported:  - https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement#events for HTML elements - https://quasar.dev/vue-components for Quasar-based elements (see the \"Events\" tab on the individual component page)",
    "url": "/documentation/generic_events"
  },
  {
    "title": "Generic Events: Specifying event attributes",
    "content": "**A list of strings** names the attributes of the JavaScript event object: ``py ui.button().on('click', handle_click, ['clientX', 'clientY']) `  **An empty list** requests _no_ attributes: `py ui.button().on('click', handle_click, []) `  **The value None** represents _all_ attributes (the default): `py ui.button().on('click', handle_click, None) `  **If the event is called with multiple arguments** like QTable's \"row-click\" (evt, row, index) => void, you can define a list of argument definitions: `py ui.table(...).on('rowClick', handle_click, [[], ['name'], None]) ` In this example the \"row-click\" event will omit all arguments of the first evt argument, send only the \"name\" attribute of the row argument and send the full index.  If the retrieved list of event arguments has length 1, the argument is automatically unpacked. So you can write `py ui.button().on('click', lambda e: print(e.args['clientX'], flush=True)) ` instead of `py ui.button().on('click', lambda e: print(e.args[0]['clientX'], flush=True)) ``  Note that by default all JSON-serializable attributes of all arguments are sent. This is to simplify registering for new events and discovering their attributes. If bandwidth is an issue, the arguments should be limited to what is actually needed on the server.",
    "url": "/documentation/generic_events#specifying_event_attributes"
  },
  {
    "title": "Generic Events: Modifiers",
    "content": "You can also include key modifiers (shown in input \"A\"), modifier combinations (shown in input \"B\"), and event modifiers (shown in input \"C\").",
    "url": "/documentation/generic_events#modifiers"
  },
  {
    "title": "Generic Events: Custom events",
    "content": "It is fairly easy to emit custom events from JavaScript which can be listened to with element.on(...). This can be useful if you want to call Python code when something happens in JavaScript. In this example we are listening to the visibilitychange event of the browser tab.",
    "url": "/documentation/generic_events#custom_events"
  },
  {
    "title": "Pyplot Context",
    "content": "Create a context to configure a Matplotlib <https://matplotlib.org/>_ plot.  :param close: whether the figure should be closed after exiting the context; set to False if you want to update it later (default: True) :param kwargs: arguments like figsize which should be passed to pyplot.figure <https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.figure.html>_",
    "url": "/documentation/pyplot"
  },
  {
    "title": "Tabs",
    "content": "The elements ui.tabs, ui.tab, ui.tab_panels, and ui.tab_panel resemble Quasar's tabs <https://quasar.dev/vue-components/tabs>_ and tab panels <https://quasar.dev/vue-components/tab-panels>_ API.  ui.tabs creates a container for the tabs. This could be placed in a ui.header for example. ui.tab_panels creates a container for the tab panels with the actual content. Each ui.tab_panel is associated with a ui.tab element.",
    "url": "/documentation/tabs"
  },
  {
    "title": "Tabs: Name, label, icon",
    "content": "The ui.tab element has a label property that can be used to display a different text than the name. The name can also be used instead of the ui.tab objects to associate a ui.tab with a ui.tab_panel. Additionally each tab can have an icon.",
    "url": "/documentation/tabs#name,_label,_icon"
  },
  {
    "title": "Tabs: Switch tabs programmatically",
    "content": "The ui.tabs and ui.tab_panels elements are derived from ValueElement which has a set_value method. That can be used to switch tabs programmatically.",
    "url": "/documentation/tabs#switch_tabs_programmatically"
  },
  {
    "title": "Bindings",
    "content": "NiceGUI is able to directly bind UI elements to models. Binding is possible for UI element properties like text, value or visibility and for model properties that are (nested) class attributes. Each element provides methods like bind_value and bind_visibility to create a two-way binding with the corresponding property. To define a one-way binding use the _from and _to variants of these methods. Just pass a property of the model as parameter to these methods to create the binding.",
    "url": "/documentation/bindings"
  },
  {
    "title": "Bindings: Bind to dictionary",
    "content": "Here we are binding the text of labels to a dictionary.",
    "url": "/documentation/bindings#bind_to_dictionary"
  },
  {
    "title": "Bindings: Bind to variable",
    "content": "Here we are binding the value from the datepicker to a bare variable. Therefore we use the dictionary globals() which contains all global variables. This demo is based on the official datepicker example.",
    "url": "/documentation/bindings#bind_to_variable"
  },
  {
    "title": "Bindings: Bind to storage",
    "content": "Bindings also work with app.storage. Here we are storing the value of a textarea between visits. The note is also shared between all tabs of the same user.",
    "url": "/documentation/bindings#bind_to_storage"
  },
  {
    "title": "3D Scene",
    "content": "Display a 3D scene using three.js <https://threejs.org/>_. Currently NiceGUI supports boxes, spheres, cylinders/cones, extrusions, straight lines, curves and textured meshes. Objects can be translated, rotated and displayed with different color, opacity or as wireframes. They can also be grouped to apply joint movements.  :param width: width of the canvas :param height: height of the canvas :param grid: whether to display a grid :param on_click: callback to execute when a 3D object is clicked :param on_drag_start: callback to execute when a 3D object is dragged :param on_drag_end: callback to execute when a 3D object is dropped :param drag_constraints: comma-separated JavaScript expression for constraining positions of dragged objects (e.g. `'x = 0, z = y / 2') run_method Run a method on the client.  :param name: name of the method :param args: arguments to pass to the method move_camera Move the camera to a new position.  :param x: camera x position :param y: camera y position :param z: camera z position :param look_at_x: camera look-at x position :param look_at_y: camera look-at y position :param look_at_z: camera look-at z position :param up_x: x component of the camera up vector :param up_y: y component of the camera up vector :param up_z: z component of the camera up vector :param duration: duration of the movement in seconds (default: 0.5) delete_objects Remove objects from the scene.  :param predicate: function which returns True` for objects which should be deleted clear Remove all objects from the scene.",
    "url": "/documentation/scene"
  },
  {
    "title": "Scene: Handling Click Events",
    "content": "You can use the on_click argument to ui.scene to handle click events. The callback receives a SceneClickEventArguments object with the following attributes:  - click_type: the type of click (\"click\" or \"dblclick\"). - button: the button that was clicked (1, 2, or 3). - alt, ctrl, meta, shift: whether the alt, ctrl, meta, or shift key was pressed. - hits: a list of SceneClickEventHit objects, sorted by distance from the camera.  The SceneClickEventHit object has the following attributes:  - object_id: the id of the object that was clicked. - object_name: the name of the object that was clicked. - x, y, z: the x, y and z coordinates of the click.",
    "url": "/documentation/scene#handling_click_events"
  },
  {
    "title": "Scene: Draggable objects",
    "content": "You can make objects draggable using the .draggable method. There is an optional on_drag_start and on_drag_end argument to ui.scene to handle drag events. The callbacks receive a SceneDragEventArguments object with the following attributes:  - type: the type of drag event (\"dragstart\" or \"dragend\"). - object_id: the id of the object that was dragged. - object_name: the name of the object that was dragged. - x, y, z: the x, y and z coordinates of the dragged object.  You can also use the drag_constraints argument to set comma-separated JavaScript expressions for constraining positions of dragged objects.",
    "url": "/documentation/scene#draggable_objects"
  },
  {
    "title": "Scene: Rendering point clouds",
    "content": "You can render point clouds using the point_cloud method. The points argument is a list of point coordinates, and the colors argument is a list of RGB colors (0..1).",
    "url": "/documentation/scene#rendering_point_clouds"
  },
  {
    "title": "ui.run",
    "content": "You can call ui.run() with optional arguments. Most of them only apply after stopping and fully restarting the app and do not apply with auto-reloading.  :param host: start server with this host (defaults to '127.0.0.1 in native mode, otherwise '0.0.0.0') :param port: use this port (default: 8080) :param title: page title (default: 'NiceGUI', can be overwritten per page) :param viewport: page meta viewport content (default: 'width=device-width, initial-scale=1', can be overwritten per page) :param favicon: relative filepath, absolute URL to a favicon (default: None, NiceGUI icon will be used) or emoji (e.g. '\ud83d\ude80', works for most browsers) :param dark: whether to use Quasar's dark mode (default: False, use None for \"auto\" mode) :param language: language for Quasar elements (default: 'en-US') :param binding_refresh_interval: time between binding updates (default: 0.1 seconds, bigger is more CPU friendly) :param reconnect_timeout: maximum time the server waits for the browser to reconnect (default: 3.0 seconds) :param show: automatically open the UI in a browser tab (default: True) :param on_air: tech preview: allows temporary remote access <https://nicegui.io/documentation#nicegui_on_air>_ if set to True (default: disabled) :param native: open the UI in a native window of size 800x600 (default: False, deactivates show, automatically finds an open port) :param window_size: open the UI in a native window with the provided size (e.g. (1024, 786), default: None, also activates native) :param fullscreen: open the UI in a fullscreen window (default: False, also activates native) :param frameless: open the UI in a frameless window (default: False, also activates native) :param reload: automatically reload the UI on file changes (default: True) :param uvicorn_logging_level: logging level for uvicorn server (default: 'warning') :param uvicorn_reload_dirs: string with comma-separated list for directories to be monitored (default is current working directory only) :param uvicorn_reload_includes: string with comma-separated list of glob-patterns which trigger reload on modification (default: '*.py') :param uvicorn_reload_excludes: string with comma-separated list of glob-patterns which should be ignored for reload (default: '.*, .py[cod], .sw.*, ~*') :param tailwind: whether to use Tailwind (experimental, default: True) :param prod_js: whether to use the production version of Vue and Quasar dependencies (default: True) :param endpoint_documentation: control what endpoints appear in the autogenerated OpenAPI docs (default: 'none', options: 'none', 'internal', 'page', 'all') :param storage_secret: secret key for browser-based storage (default: None, a value is required to enable ui.storage.individual and ui.storage.browser) :param kwargs: additional keyword arguments are passed to uvicorn.run",
    "url": "/documentation/run"
  },
  {
    "title": "Run: Emoji favicon",
    "content": "You can use an emoji as favicon. This works in Chrome, Firefox and Safari.",
    "url": "/documentation/run#emoji_favicon"
  },
  {
    "title": "Run: Base64 favicon",
    "content": "You can also use an base64-encoded image as favicon.",
    "url": "/documentation/run#base64_favicon"
  },
  {
    "title": "Run: SVG favicon",
    "content": "And directly use an SVG as favicon. Works in Chrome, Firefox and Safari.",
    "url": "/documentation/run#svg_favicon"
  },
  {
    "title": "Audio",
    "content": "Displays an audio player.  :param src: URL or local file path of the audio source :param controls: whether to show the audio controls, like play, pause, and volume (default: True) :param autoplay: whether to start playing the audio automatically (default: False) :param muted: whether the audio should be initially muted (default: False) :param loop: whether the audio should loop (default: False)  See here <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/audio#events>_ for a list of events you can subscribe to using the generic event subscription on(). seek Seek to a specific position in the audio.  :param seconds: the position in seconds play Play audio.pause Pause audio.",
    "url": "/documentation/audio"
  },
  {
    "title": "Audio: Control the audio element",
    "content": "This demo shows how to play, pause and seek programmatically.",
    "url": "/documentation/audio#control_the_audio_element"
  },
  {
    "title": "Chat Message",
    "content": "Based on Quasar's Chat Message <https://quasar.dev/vue-components/chat/>_ component.  :param text: the message body (can be a list of strings for multiple message parts) :param name: the name of the message author :param label: renders a label header/section only :param stamp: timestamp of the message :param avatar: URL to an avatar :param sent: render as a sent message (so from current user) (default: False) :param text_html: render text as HTML (default: False)",
    "url": "/documentation/chat_message"
  },
  {
    "title": "Chat Message: HTML text",
    "content": "Using the text_html parameter, you can send HTML text to the chat.",
    "url": "/documentation/chat_message#html_text"
  },
  {
    "title": "Chat Message: Newline",
    "content": "You can use newlines in the chat message.",
    "url": "/documentation/chat_message#newline"
  },
  {
    "title": "Chat Message: Multi-part messages",
    "content": "You can send multiple message parts by passing a list of strings.",
    "url": "/documentation/chat_message#multi-part_messages"
  },
  {
    "title": "Knob",
    "content": "This element is based on Quasar's QKnob <https://quasar.dev/vue-components/knob>_ component. The element is used to take a number input from the user through mouse/touch panning.  :param value: the initial value (default: 0.0) :param min: the minimum value (default: 0.0) :param max: the maximum value (default: 1.0) :param step: the step size (default: 0.01) :param color: knob color (either a Quasar, Tailwind, or CSS color or None, default: \"primary\") :param center_color: color name for the center part of the component, examples: primary, teal-10 :param track_color: color name for the track of the component, examples: primary, teal-10 :param size: size in CSS units, including unit name or standard size name (xs|sm|md|lg|xl), examples: 16px, 2rem :param show_value: whether to show the value as text :param on_change: callback to execute when the value changes",
    "url": "/documentation/knob"
  },
  {
    "title": "Link",
    "content": "Create a hyperlink.  To jump to a specific location within a page you can place linkable anchors with ui.link_target(\"name\") and link to it with ui.link(target=\"#name\").  :param text: display text :param target: page function, NiceGUI element on the same page or string that is a an absolute URL or relative path from base URL :param new_tab: open link in new tab (default: False)",
    "url": "/documentation/link"
  },
  {
    "title": "Link: Navigate on large pages",
    "content": "To jump to a specific location within a page you can place linkable anchors with ui.link_target('target_name') or simply pass a NiceGUI element as link target.",
    "url": "/documentation/link#navigate_on_large_pages"
  },
  {
    "title": "Link: Links to other pages",
    "content": "You can link to other pages by providing the link target as path or function reference.",
    "url": "/documentation/link#links_to_other_pages"
  },
  {
    "title": "Link: Link from images and other elements",
    "content": "By nesting elements inside a link you can make the whole element clickable. This works with all elements but is most useful for non-interactive elements like ui.image, ui.avatar etc.",
    "url": "/documentation/link#link_from_images_and_other_elements"
  },
  {
    "title": "Log View",
    "content": "Create a log view that allows to add new lines without re-transmitting the whole history to the client.  :param max_lines: maximum number of lines before dropping oldest ones (default: None) push Add a new line to the log.  :param line: the line to add (can contain line breaks) clear Clear the log.",
    "url": "/documentation/log"
  },
  {
    "title": "Log: Attach to a logger",
    "content": "You can attach a ui.log element to a Python logger object so that log messages are pushed to the log element.",
    "url": "/documentation/log#attach_to_a_logger"
  },
  {
    "title": "Line Plot",
    "content": "Create a line plot using pyplot. The push method provides live updating when utilized in combination with ui.timer.  :param n: number of lines :param limit: maximum number of datapoints per line (new points will displace the oldest) :param update_every: update plot only after pushing new data multiple times to save CPU and bandwidth :param close: whether the figure should be closed after exiting the context; set to False if you want to update it later (default: True) :param kwargs: arguments like figsize which should be passed to pyplot.figure <https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.figure.html>_ with_legend Add a legend to the plot.  :param titles: list of titles for the lines :param kwargs: additional arguments which should be passed to pyplot.legend <https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.legend.html>_ push Push new data to the plot.  :param x: list of x values :param Y: list of lists of y values (one list per line) clear Clear the line plot.",
    "url": "/documentation/line_plot"
  },
  {
    "title": "Context Menu",
    "content": "Creates a context menu based on Quasar's QMenu <https://quasar.dev/vue-components/menu>_ component. The context menu should be placed inside the element where it should be shown. It is automatically opened when the user right-clicks on the element and appears at the mouse position. open Open the context menu.close Close the context menu.",
    "url": "/documentation/context_menu"
  },
  {
    "title": "Add a directory of static files.",
    "content": "add_static_files() makes a local directory available at the specified endpoint, e.g. '/static'. This is useful for providing local data like images to the frontend. Otherwise the browser would not be able to access the files. Do only put non-security-critical files in there, as they are accessible to everyone.  To make a single file accessible, you can use add_static_file(). For media files which should be streamed, you can use add_media_files() or add_media_file() instead.  :param url_path: string that starts with a slash \"/\" and identifies the path at which the files should be served :param local_directory: local folder with files to serve as static content",
    "url": "/documentation/add_static_files"
  },
  {
    "title": "Query Selector",
    "content": "To manipulate elements like the document body, you can use the ui.query function. With the query result you can add classes, styles, and attributes like with every other UI element. This can be useful for example to change the background color of the page (e.g. ui.query('body').classes('bg-green')).  :param selector: the CSS selector (e.g. \"body\", \"#my-id\", \".my-class\", \"div > p\")",
    "url": "/documentation/query"
  },
  {
    "title": "Query: Set background gradient",
    "content": "It's easy to set a background gradient, image or similar. See w3schools.com for more information about setting background with CSS.",
    "url": "/documentation/query#set_background_gradient"
  },
  {
    "title": "Query: Modify default page padding",
    "content": "By default, NiceGUI provides a built-in padding around the content of the page. You can modify it using the class selector .nicegui-content.",
    "url": "/documentation/query#modify_default_page_padding"
  }
]